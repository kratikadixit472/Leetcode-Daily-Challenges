// Day 1 ==>>  Palindrome Linked List

class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head == null){
            return true;
        }
        
        ListNode slow = head, fast = head;
        Stack<Integer> st = new Stack<>();
        
        while(fast != null && fast.next != null){
            st.push(slow.val);
            slow = slow.next;
            fast = fast.next.next;
        }
        if(fast != null){
            slow = slow.next;
        }
        while(!st.isEmpty() && slow != null){
            if(slow.val != st.pop()){
                return false;
            }
            slow = slow.next;
        }
        return true;
    }
}


// Day 2 ==>>   Ones and Zeroes

class Solution {
    
     public int findMaxForm(String[] strs, int m, int n) {

        int[][] strFreq = new int[strs.length][2];
        int i = 0;
        for (String str : strs) {
            strFreq[i] = freqCount(str);
            i++;
        }

        int[][] dp = new int[m + 1][n + 1];

        for (i = 0; i < strs.length; i++) {
            int oneFreq = strFreq[i][1];
            int zeroFreq = strFreq[i][0];

            for (int k = m; k >= zeroFreq; k--) {
                for (int j = n; j >= oneFreq; j--) {
                    dp[k][j] = Math.max(dp[k][j], dp[k - zeroFreq][j - oneFreq] + 1);
                }
            }

        }
        return dp[m][n];
    }

    private int[] freqCount(String str) {
        int[] freq = new int[2];
        for (char a : str.toCharArray()) {
            if (a == '0') {
                freq[0]++;
            } else {
                freq[1]++;
            }
        }
        return freq;
    }
}


// Day 3 ==>>   Longest Valid Parentheses

class Solution {
    public int longestValidParentheses(String s) {
        
        if(s == "") return 0;
        
        int count = 0;
        Stack<Integer> st = new Stack<>();
        st.push(-1);
        
        for(int i=0; i<s.length(); i++){
            char ch = s.charAt(i);
            if(ch == '('){ st.push(i); }
            else {
                st.pop();
                if(st.isEmpty()){
                    st.push(i);
                }
                else{
                    count = Math.max(count, i-st.peek());
                }
                
            }
        }
        return count;
    }
}


//Day 4 ==>>  Design Circular Queue

class MyCircularQueue {
    int F;
    int R;
    boolean noElPresent;
    int[] cqueue = null;

    public MyCircularQueue(int k) {
        this.cqueue = new int[k];
        this.noElPresent  = true;
        this.F = 0;
        this.R = 0;

    }
    //O(1)
    public boolean enQueue(int value) {
        if(this.isFull()){
            return false;
        } else{
            this.noElPresent = false;
            cqueue[R]  =value;
            R = (R+1) % cqueue.length;
            return true;
        }
    }
    // O(1)
    public boolean deQueue() {
        if(this.isEmpty()){
            return false;
        } else{
            F = (F+1) % cqueue.length;
            if(R==F){
                this.noElPresent = true;
            }
            return true;
        }
    }

    // O(1)
    public int Front() {
        if(this.isEmpty()){
            return -1;
        } else{
            return cqueue[F];
        }
    }

    // O(1)
    public int Rear() {
        if(this.isEmpty()){
            return -1;
        } else{
            if(R == 0){
                return cqueue[cqueue.length-1];
            } else{
                return cqueue[R-1];
            }
        }
    }

    // O(1)
    public boolean isEmpty() {
        return this.noElPresent;
    }

    // O(1)
    public boolean isFull() {
        return F==R && !this.isEmpty();// F ==R && !this.noElPresent
    }
}


/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */



Day 5 ==>>  Global and Local Inversions

class Solution {
    public boolean isIdealPermutation(int[] a) {
        
        int n = a.length;
        
            int max = a[0];
            for(int i=0; i<n-2; i++){
                max = Math.max(max, a[i]);
                if(max > a[i+2]){
                    return false;
                }
            }
        return true;
    }
}

